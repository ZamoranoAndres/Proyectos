#include <iostream>
#include <conio.h>
#include <string.h>
#include <stdio.h>
using namespace std;
#define COL 10
#define FIL 70

char pantalla[COL][FIL];

struct regProducto
{
	int id_prod;
	char nom_prod[30];
	int stock;
	float precio;
	char estado; //A o E
};
struct regCliente
{
	int id_cliente;
	char nom_cliente[30];
	char nit[30];
	char email[80];
	char estado;//A o E

};
struct regVendedor
{
	int id_vend;
	char nom_vend[30];
	char telefono[15];
	char email[80];
	char estado;
};
struct regAuto
{
	int id_auto;
	char placa[12];
	int id_cliente;
	char estado;
};
struct regBomba
{
	int id_bomba;
	char descripcion[30];
	int id_prod;
	int id_vend;
	char estado;
};
struct regCompra
{
	int id_compra;
	char fecha[10];
	int cantidad;
	int id_prod;
	char estado;
};
struct regVenta
{
	int id_venta;
	char fecha[10];
	int cantidad;
	float precio_unitario;
	int id_bomba;
	int id_auto;
	char estado;
};

///////////////////// Funciones ///////////////////////////////////
float retorna_monto_total_cliente(int ini, int  fin, int id_cliente);
int Retorna_id_cliente_mayor(int ini, int fin);
regAuto obtener_reg_auto(int id_auto);
regCliente obtener_reg_cliente(int id_cliente);
regProducto obtener_reg_producto(int id_prod);
///////////////////////////////////////////////////////////////////


/////////////////////////////validar enteros//////////////////////////////////////

int convertir_enteros(char cad[30])
{
	int n = strlen(cad), num = 0, i;

	for (i = 0; i<n; i++)
	{
		if (cad[i] == '1')
		{
			num = num * 10 + 1;
		}
		else if (cad[i] == '2')
		{
			num = num * 10 + 2;
		}
		else    if (cad[i] == '3')
		{
			num = num * 10 + 3;
		}
		else if (cad[i] == '4')
		{
			num = num * 10 + 4;
		}
		else    if (cad[i] == '5')
		{
			num = num * 10 + 5;
		}
		else if (cad[i] == '6')
		{
			num = num * 10 + 6;
		}
		else    if (cad[i] == '7')
		{
			num = num * 10 + 7;
		}
		else if (cad[i] == '8')
		{
			num = num * 10 + 8;
		}
		else if (cad[i] == '9')
		{
			num = num * 10 + 9;
		}
		else if (cad[i] == '0')
		{
			num = num * 10 + 0;
		}
	}

	return(num);
}

bool verificar_entero(char cad[30])
{
	int i, n = strlen(cad);
	bool k = false;
	for (i = 0; i<n; i++)
	{
		if (cad[i] == '1' || cad[i] == '2' || cad[i] == '3' || cad[i] == '4' || cad[i] == '5' || cad[i] == '6' || cad[i] == '7' || cad[i] == '8' || cad[i] == '9' || cad[i] == '0')
		{
			k = true;
		}
		else
		{
			k = false;
			i = n;
		}
	}
	return(k);
}

////////////////////////////////////////////////////////////////////////////////



///////////////////////////// VALIDAR EMAIL ////////////////////////////////////

bool Email_Correcto(char email[80])
{
	int n = strlen(email), i, c = 0, j;
	bool k = false;

	if (email[0] >= 'a' && email[0] <= 'z')
	{
		for (i = 1; i<n; i++)
		{
			if (email[i] == '@')
			{
				c++;
				j = i;
			}
		}
		if (c == 1)
		{
			while (j<n - 1)
			{
				if (email[j] == '.')
				{
					k = true;
				}
				j++;
			}
		}
	}
	return k;
}

//////////////////////////////////////////////////////////////////////////////



/////////////////////////////    VALIDAR FECHA    ////////////////////////////////////////

bool fecha_correcta(char fecha[10])
{
	bool k = false;
	char dia_cad[30], mes_cad[30], anho_cad[30];
	int dia, mes, anho;
	dia_cad[0] = fecha[0];
	dia_cad[1] = fecha[1];
	dia_cad[2] = '\0';
	mes_cad[0] = fecha[3];
	mes_cad[1] = fecha[4];
	mes_cad[2] = '\0';
	anho_cad[0] = fecha[6];
	anho_cad[1] = fecha[7];
	anho_cad[2] = fecha[8];
	anho_cad[3] = fecha[9];
	anho_cad[4] = '\0';
	if (fecha[2] == '/' && fecha[5] == '/')
	{
		if (verificar_entero(dia_cad) && verificar_entero(mes_cad) && verificar_entero(anho_cad))
		{
			dia = convertir_enteros(dia_cad);
			mes = convertir_enteros(mes_cad);
			anho = convertir_enteros(anho_cad);

			if (anho > 999 && anho <= 9999)
			{
				if (mes == 1 || mes == 3 || mes == 5 || mes == 7 || mes == 8 || mes == 10 || mes == 12)
				{
					if (dia > 0 && dia <= 31)
					{
						k = true;
					}
				}
				if (mes == 4 || mes == 6 || mes == 9 || mes == 11)
				{
					if (dia > 0 && dia <= 30)
					{
						k = true;
					}
				}
				if (anho % 4 == 0)
				{
					if (mes == 2)
					{
						if (dia > 0 && dia <= 29)
						{
							k = true;
						}
					}
				}
				else
				{
					if (mes == 2)
					{
						if (dia > 0 && dia <= 28)
						{
							k = true;
						}
					}
				}
			}
		}
	}

	return k;
}

int convertir_fecha(char fecha[10])
{
	char dia[2], mes[2], anho[4];
	int sol, a, m, d;

	dia[0] = fecha[0];
	dia[1] = fecha[1];
	mes[0] = fecha[3];
	mes[1] = fecha[4];
	anho[0] = fecha[6];
	anho[1] = fecha[7];
	anho[2] = fecha[8];
	anho[3] = fecha[9];

	d = convertir_enteros(dia);
	m = convertir_enteros(mes);
	a = convertir_enteros(anho);

	sol = a * 10000 + d + m * 100;

	return(sol);
}

//////////////////////////////////////////////////////////////////////////////



//////////////////////////    VALIDAR PLACA    //////////////////////////////////////

bool Placa_Correcto(char placa[12])
{
	int n = strlen(placa), i;
	bool k = false;

	for (i = 0; i<n; i++)
	{
		if ((placa[i]>'A' && placa[i]<'Z') || (placa[i]>'0'&&placa[i]<'9'))
		{
			k = true;
		}
		return k;
	}
}

//////////////////////////////////////////////////////////////////////////////



///////////////////////////////    VALIDAR TELEFONO    //////////////////////////////////////

bool Telefono_Correcto(char telefono[15])
{
	int n = strlen(telefono), i = 0;
	bool k = true;

	while ((k == true) && (i<n))
	{
		k = false;
		if ((telefono[i] == ' ') || (telefono[i] == '+') || telefono[i] == '1' || telefono[i] == '2' || telefono[i] == '3' || telefono[i] == '4' || telefono[i] == '5' || telefono[i] == '6' || telefono[i] == '7' || telefono[i] == '8' || telefono[i] == '9' || telefono[i] == '0')
		{
			k = true;
		}
		i++;
	}
	return k;
}

//////////////////////////////////////////////////////////////////////////////



///////////////////////////// ID  existente////////////////////////////

bool id_cliente_existente(int id)
{
	bool k = false;
	regCliente reg;
	FILE*ptr;
	ptr = fopen("cliente.dat", "rb");
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			if (id == reg.id_cliente)
			{
				if (reg.estado == 'A')
				{
					k = true;
				}
				else{ cout << "el registro fue eliminado"; }

			}
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
	}
	else{ cout << "el registro no existe"; }

	return(k);
}

bool id_prod_existente(int id)
{
	bool k = false;
	regProducto reg;
	FILE*ptr;
	ptr = fopen("producto.dat", "rb");
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			if (id == reg.id_prod)
			{
				if (reg.estado == 'A')
				{
					k = true;
				}
				else{ cout << "el registro fue eliminado"; }

			}
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
	}
	else{ cout << "el registro no existe"; }

	return(k);
}

bool id_vend_existente(int id)
{
	bool k = false;
	regVendedor reg;
	FILE*ptr;
	ptr = fopen("vendedor.dat", "rb");
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			if (id == reg.id_vend)
			{
				if (reg.estado == 'A')
				{
					k = true;
				}
				else{ cout << "el registro fue eliminado"; }

			}
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
	}
	else{ cout << "el registro no existe"; }

	return(k);
}

bool id_bomba_existente(int id)
{
	bool k = false;
	regBomba reg;
	FILE*ptr;
	ptr = fopen("bomba.dat", "rb");
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			if (id == reg.id_bomba)
			{
				if (reg.estado == 'A')
				{
					k = true;
				}
				else{ cout << "el registro fue eliminado"; }

			}
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
	}
	else{ cout << "el registro no existe"; }

	return(k);
}

bool id_auto_existente(int id)
{
	bool k = false;
	regAuto reg;
	FILE*ptr;
	ptr = fopen("auto.dat", "rb");
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			if (id == reg.id_auto)
			{
				if (reg.estado == 'A')
				{
					k = true;
				}
				else{ cout << "el registro fue eliminado"; }

			}
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
	}
	else{ cout << "el registro no existe"; }

	return(k);
}

bool id_compra_existente(int id)
{
	bool k = false;
	regCompra reg;
	FILE*ptr;
	ptr = fopen("compra.dat", "rb");
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			if (id == reg.id_compra)
			{
				if (reg.estado == 'A')
				{
					k = true;
				}
				else{ cout << "el registro fue eliminado"; }

			}
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
	}
	else{ cout << "el registro no existe"; }

	return(k);
}

bool id_venta_existente(int id)
{
	bool k = false;
	regVenta reg;
	FILE*ptr;
	ptr = fopen("venta.dat", "rb");
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			if (id == reg.id_venta)
			{
				if (reg.estado == 'A')
				{
					k = true;
				}
				else{ cout << "el registro fue eliminado"; }

			}
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
	}
	else{ cout << "el registro no existe"; }

	return(k);
}

///////////////////////////////////////////////////////////////////


//////////////////////////    VALIDAR PRECIO ////////////////////////////

bool precio_float(char precio[30])
{
	bool k = true;
	int i, n = strlen(precio), c = 0;

	for (i = 0; i<n; i++)
	{
		if (precio[i] == '.')
		{
			c++;
			if (c >= 2)
			{
				k = false;
			}
		}
	}

	return(k);
}

float convertir_float(char cad[30])
{
	int n = strlen(cad), i = 0;
	float num = 0, dec = 0, k = 1;

	while (cad[i] != '.'&&n>i)
	{
		if (cad[i] == '1')
		{
			num = num * 10 + 1;
		}
		else if (cad[i] == '2')
		{
			num = num * 10 + 2;
		}
		else    if (cad[i] == '3')
		{
			num = num * 10 + 3;
		}
		else if (cad[i] == '4')
		{
			num = num * 10 + 4;
		}
		else    if (cad[i] == '5')
		{
			num = num * 10 + 5;
		}
		else if (cad[i] == '6')
		{
			num = num * 10 + 6;
		}
		else    if (cad[i] == '7')
		{
			num = num * 10 + 7;
		}
		else if (cad[i] == '8')
		{
			num = num * 10 + 8;
		}
		else if (cad[i] == '9')
		{
			num = num * 10 + 9;
		}
		else if (cad[i] == '0')
		{
			num = num * 10 + 0;
		}
		i++;
	}
	while (i<n)
	{
		{ if (cad[i] == '1')
		{
			dec = dec * 10 + 1;
		}
		else if (cad[i] == '2')
		{
			dec = dec * 10 + 2;
		}
		else    if (cad[i] == '3')
		{
			dec = dec * 10 + 3;
		}
		else if (cad[i] == '4')
		{
			dec = dec * 10 + 4;
		}
		else    if (cad[i] == '5')
		{
			dec = dec * 10 + 5;
		}
		else if (cad[i] == '6')
		{
			dec = dec * 10 + 6;
		}
		else    if (cad[i] == '7')
		{
			dec = dec * 10 + 7;
		}
		else if (cad[i] == '8')
		{
			dec = dec * 10 + 8;
		}
		else if (cad[i] == '9')
		{
			dec = dec * 10 + 9;
		}
		else if (cad[i] == '0')
		{
			dec = dec * 10 + 0;
		}
		i++;
		k = k*0.1;
		}

	}
	dec = dec*k * 10;
	num = num + dec;
	return(num);
}

bool verificar_float(char cad[30])
{
	int i, n = strlen(cad);
	bool k = false;
	for (i = 0; i<n; i++)
	{
		if (cad[i] == '1' || cad[i] == '2' || cad[i] == '3' || cad[i] == '4' || cad[i] == '5' || cad[i] == '6' || cad[i] == '7' || cad[i] == '8' || cad[i] == '9' || cad[i] == '0' || cad[i] == '.')
		{
			k = true;
		}
		else
		{
			k = false;
			i = n;
		}
	}
	return(k);
}

///////////////////////////////////////////////////////////////////


/////////////////////////////    ESCRIBIR STOCK  EN COMPRA    /////////////////////////
void escribir_stock(int cant, int idprod)
{
	regProducto reg;
	int c = 0; bool k = false;
	FILE *ptr;
	ptr = fopen("producto.dat", "r+b");

	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while ((feof(ptr) == false) && (k == false))
		{
			if (idprod == reg.id_prod&&reg.estado == 'A')
			{
				k = true;
				reg.stock = reg.stock + cant;

			}

			if (k == true)
			{
				fseek(ptr, (c)*sizeof(reg), SEEK_SET);
				fwrite(&reg, sizeof(reg), 1, ptr);
			}

			else
			{
				fread(&reg, sizeof(reg), 1, ptr);
				c++;
			}
		}


		fclose(ptr);
	}
	else{ cout << "el archivo no existe !!!!"; }

}


/////////////////////// ESCRIBIR STOCK RESTANTE DE LA VENTA //////////////////////////////////////

int  obtener_id_prod_venta_y_bomba(int id_bomba)
{
	int c;
	regBomba reg;
	FILE*ptr;
	bool k = false;
	ptr = fopen("bomba.dat", "rb");

	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while ((feof(ptr) == false) && (k == false))
		{
			if (id_bomba == reg.id_bomba&&reg.estado == 'A')
			{
				k = true;
				c = reg.id_prod;

			}
			fread(&reg, sizeof(reg), 1, ptr);

		}
		fclose(ptr);
	}
	else{ cout << "el archivo no existe"; }
	return(c);
}

bool escribir_cantidad_a_vender(int cant, int idprod)
{
	regProducto reg;
	int c = 0; bool k = false;
	FILE *ptr;
	ptr = fopen("producto.dat", "r+b");

	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while ((feof(ptr) == false) && (k == false))
		{
			if (idprod == reg.id_prod&&reg.estado == 'A')
			{
				if (reg.stock >= cant)
				{
					reg.stock = reg.stock - cant;
					k = true;
				}
				else{
					cout << endl << "No hay suficiente stock, solo queda : " << reg.stock;
				}
			}
			if (k == true)
			{

				fseek(ptr, (c)*sizeof(reg), SEEK_SET);

				fwrite(&reg, sizeof(reg), 1, ptr);

			}
			else{
				fread(&reg, sizeof(reg), 1, ptr);
				c++;
			}
		}

		fclose(ptr);
	}
	else{ cout << "el archivo no existe !!!!"; }

	return(k);
}

//////////////////////////////////////////////////////////////////////


//////////////////////////// MONTO EN LITERAL ///////////////////////////

void Monto_Literal(int numero) {

	int  n1, n2, n3, n4, n5;
	n1 = numero / 10000;
	n2 = (numero / 1000) % 10;
	n3 = (numero / 100) % 10;
	n4 = (numero / 10) % 10;
	n5 = (numero % 10);

	cout << "  --------->   ";


	if (numero > 90000){

	}
	else{
		if (n1 == 1 && n2 == 0){
			cout << "DIEZ MIL ";
		}
		else if (n1 == 1 && n2>5)
		{
			cout << "DIEZ Y ";
		}
		else if (n1 == 1 && n2 == 1){
			cout << "ONCE ";
		}
		else if (n1 == 1 && n2 == 2){
			cout << "DOCE MIL ";
		}
		else if (n1 == 1 && n2 == 3)
		{
			cout << "TRECE MIL ";
		}
		else if (n1 == 1 && n2 == 4){
			cout << "CATORCE MIL ";
		}
		else if (n1 == 1 && n2 == 5)
		{
			cout << "QUINCE MIL ";
		}

		//                         numero del 20 mil para arriba estan mal hechos
		else if (n1 == 2 && n2 == 0){
			cout << "VEINTE MIL ";
		}
		else if (n1 == 2 && n2 == 1)
		{
			cout << "VEINTIUN ";
		}
		else if (n1 == 2)
		{
			cout << "VEINTI";
		}
		else if (n1 == 3 && n2 == 0){
			cout << "TREINTA MIL ";
		}
		else if (n1 == 3 && n2 == 1)
		{
			cout << "TREINTA Y UN";
		}
		else if (n1 == 3 && n2 > 1)
		{
			cout << "TREINTA Y ";
		}
		else if (n1 == 4 && n2 == 0){
			cout << "CUARENTA MIL";
		}
		else if (n1 == 4 && n2 == 1)
		{
			cout << "CUARENTA Y UN";
		}
		else if (n1 == 4 && n2 > 1)
		{
			cout << "CUARENTA Y ";
		}
		else if (n1 == 5 && n2 == 0){
			cout << "CINCUENTA MIL ";
		}
		else if (n1 == 5 && n2 == 1)
		{
			cout << "CINCUENTA Y UN ";
		}
		else if (n1 == 5 && n2 > 1)
		{
			cout << "CINCUENTA Y ";
		}
		else if (n1 == 6 && n2 == 0){
			cout << "SESENTA MIL ";
		}
		else if (n1 == 6 && n2 == 1)
		{
			cout << "SESENTA Y UN";
		}
		else if (n1 == 6 && n2 > 1)
		{
			cout << "SESENTA Y ";
		}
		else if (n1 == 7){
			cout << "SETENTA MIL ";
		}
		else if (n1 == 8){
			cout << "OCHENTA MIL ";
		}
		else if (n1 == 9){
			cout << "NOVENTA MIL ";
		}
		if (n2 == 1){
			cout << "MIL ";
		}
		else if (n2 == 2 && n1 != 1){
			cout << "DOS MIL ";
		}
		else if (n2 == 3 && n1 != 1){
			cout << "TRES MIL ";
		}
		else if (n2 == 4 && n1 != 1){
			cout << "CUATRO MIL ";
		}
		else if (n2 == 5 && n1 != 1){
			cout << "CINCO MIL ";
		}
		else if (n2 == 6){
			cout << "SEIS MIL ";
		}
		else if (n2 == 7){
			cout << "SIETE MIL ";
		}
		else if (n2 == 8){
			cout << "OCHO MIL ";
		}
		else if (n2 == 9){
			cout << "NUEVE MIL ";
		}
		if (n3 == 1 && n4 == 0 && n5 == 0){
			cout << "CIEN";
		}
		else if (n3 == 1){
			cout << "CIENTO ";
		}
		else if (n3 == 2){
			cout << "DOSCIENTOS ";
		}
		else if (n3 == 3){
			cout << "TRESCIENTOS ";
		}
		else if (n3 == 4){
			cout << "CUATROCIENTOS ";
		}
		else if (n3 == 5){
			cout << "QUINIENTOS ";
		}
		else if (n3 == 6){
			cout << "SEISCIENTOS ";
		}
		else if (n3 == 7){
			cout << "SETECIENTOS ";
		}
		else if (n3 == 8){
			cout << "OCHOCIENTOS ";
		}
		else if (n3 == 9){
			cout << "NOVECIENTOS ";
		}
		if (n4 == 1 && n5 == 0){
			cout << "Diez";
		}
		else if (n4 == 1 && n5 == 1){
			cout << "ONCE";
		}
		else if (n4 == 1 && n5 == 2){
			cout << "DOCE";
		}
		else if (n4 == 1 && n5 == 3){
			cout << "TRECE";
		}
		else if (n4 == 1 && n5 == 4){
			cout << "CATORCE";
		}
		else if (n4 == 1 && n5 == 5){
			cout << "QUINCE";
		}
		else if (n4 == 1){
			cout << "DIECI";
		}
		if (n4 == 2 && n5 == 0){
			cout << "VEINTE";
		}
		else if (n4 == 2){
			cout << "VEINTI";
		}
		else if (n4 == 3 && n5 == 0){
			cout << "TREINTA";
		}
		else if (n4 == 3){
			cout << "TREINTA Y ";
		}
		else if (n4 == 4 && n5 == 0){
			cout << "CUARENTA";
		}
		else if (n4 == 4){
			cout << "CUARENTA Y ";
		}
		else if (n4 == 5 && n5 == 0){
			cout << "CINCUENTA";
		}
		else if (n4 == 5){
			cout << "CINCUENTA Y ";
		}
		else if (n4 == 6 && n5 == 0){
			cout << "SESENTA";
		}
		else if (n4 == 6){
			cout << "SESENTA Y ";
		}
		else if (n4 == 7 && n5 == 0){
			cout << "SETENTA";
		}
		else if (n4 == 7){
			cout << "SETENTA Y ";
		}
		else if (n4 == 8 && n5 == 0){
			cout << "OCHENTA";
		}
		else if (n4 == 8){
			cout << "OCHENTA Y ";
		}
		else if (n4 == 9 && n5 == 0){
			cout << "NOVENTA";
		}
		else if (n4 == 9){
			cout << "NOVENTA Y ";
		}

		if (n5 == 1 && n4 > 1){
			cout << "UNO";
		}
		else if (n5 == 1 && n4 == 0){
			cout << "UNO";
		}
		else if (n5 == 2 && n4 > 1){
			cout << "DOS";
		}
		else if (n5 == 2 && n4 == 0){
			cout << "DOS";
		}
		else if (n5 == 3 && n4 > 1){
			cout << "TRES";
		}
		else if (n5 == 3 && n4 == 0){
			cout << "TRES";
		}
		else if (n5 == 4 && n4 > 1){
			cout << "CUATRO";
		}
		else if (n5 == 4 && n4 == 0){
			cout << "CUATRO";
		}
		else if (n5 == 5 && n4 > 1){
			cout << "CINCO";
		}
		else if (n5 == 5 && n4 == 0){
			cout << "CINCO";
		}
		else if (n5 == 6){
			cout << "SEIS";
		}
		else if (n5 == 7){
			cout << "SIETE";
		}
		else if (n5 == 8){
			cout << "OCHO";
		}
		else if (n5 == 9){
			cout << "NUEVE";
		}

	}

}

////////////////////////////////////////////////////////////////////////


//############################################# PRODUCTO ####################################

void Adicionar_Producto()
{
	regProducto reg;
	FILE*ptr;
	ptr = fopen("producto.dat", "ab");
	char id_prod_cad[30];
	char precio_cad[30];

	do{
		do{
			cout << "Digite el Id del producto: ";
			gets(id_prod_cad);
		} while (verificar_entero(id_prod_cad) == false);

		reg.id_prod = convertir_enteros(id_prod_cad);

	} while (id_prod_existente(reg.id_prod));

	do{
		cout << "Digite nombre del producto: ";
		gets(reg.nom_prod);
	} while (strlen(reg.nom_prod) == 0);

	reg.stock = 0;

	do{
		cout << "Digite el precio del Producto: ";
		gets(precio_cad);
	} while ((verificar_float(precio_cad) == false) || (precio_float(precio_cad) == false));

	reg.precio = convertir_float(precio_cad);

	reg.estado = 'A';

	fwrite(&reg, sizeof(reg), 1, ptr);

	system("cls");

	fclose(ptr);

}

void Listado_Producto()
{
	regProducto reg;
	int c = 0;
	FILE*ptr;
	ptr = fopen("producto.dat", "rb");
	cout << "**********************************************************" << endl;
	cout << "    " << "ID" << "        " << "Nombre " << "        " << "Stock    " << "    " << "Precio    " << endl;
	cout << "**********************************************************" << endl;
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			c++;
			if (reg.estado == 'A')
			{
				cout << c << ".  " << reg.id_prod << "        " << reg.nom_prod << "        " << reg.stock << "        " << reg.precio << endl;
				cout << "----------------------------------------------------------" << endl;
			}
			fread(&reg, sizeof(reg), 1, ptr);

		}
		fclose(ptr);
	}
	else
	{
		cout << "Archivo vacio";
	}


}

void Buscar_Producto(int nroReg)
{
	regProducto reg;
	FILE *ptr;
	ptr = fopen("producto.dat", "rb");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_prod << " " << reg.nom_prod << " " << reg.stock << " " << reg.precio << " ";
			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Modificar_Producto(int nroReg)
{
	regProducto reg;
	char id_prod_cad[30];
	char precio_cad[30];
	FILE *ptr;
	ptr = fopen("producto.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_prod << " " << reg.nom_prod << " " << reg.stock << " " << reg.precio << " ";

				do{
					do{
						cout << endl << "Digite el Id del producto: ";
						gets(id_prod_cad);
					} while (verificar_entero(id_prod_cad) == false);

					reg.id_prod = convertir_enteros(id_prod_cad);
				} while (id_prod_existente(reg.id_prod));


				do{
					cout << "Digite nombre del producto: ";
					gets(reg.nom_prod);
				} while (strlen(reg.nom_prod) == 0);



				do{
					cout << "Digite el precio del Producto: ";
					gets(precio_cad);
				} while ((verificar_float(precio_cad) == false) || (precio_float(precio_cad) == false));

				reg.precio = convertir_float(precio_cad);

				reg.estado = 'A';
				fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
				fwrite(&reg, sizeof(reg), 1, ptr);

			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Borrar_Producto(int nroReg)
{
	regProducto reg;
	FILE *ptr;
	ptr = fopen("producto.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			cout << reg.id_prod << " " << reg.nom_prod << " " << reg.stock << " " << reg.precio << " ";
			reg.estado = 'E';

			fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
			fwrite(&reg, sizeof(reg), 1, ptr);

		}
		else { cout << "el registro fue eliminado"; }
		fclose(ptr);

	}

	else{ cout << "el Registro no existe"; }

}

//#########################################################################################################################



//#############################################    CLIENTE########################################################

void Adicionar_Cliente()
{
	regCliente reg;
	FILE*ptr;
	char email[30];
	ptr = fopen("cliente.dat", "ab");
	char id_cliente_cad[30];
	do{
		do{
			cout << "Digite el Id del Cliente: ";
			gets(id_cliente_cad);
		} while (verificar_entero(id_cliente_cad) == false);

		reg.id_cliente = convertir_enteros(id_cliente_cad);
	} while (id_cliente_existente(reg.id_cliente));

	do{
		cout << "Digite nombre del Cliente: ";
		gets(reg.nom_cliente);
	} while (strlen(reg.nom_cliente) == 0);

	do{
		cout << "Digite el NIT del Cliente: ";
		gets(reg.nit);
	} while (verificar_entero(reg.nit) == false);

	do{
		cout << "Digite el email: ";
		gets(reg.email);
	} while (Email_Correcto(reg.email) == false);


	reg.estado = 'A';

	fwrite(&reg, sizeof(reg), 1, ptr);

	fclose(ptr);

}

void Listado_Cliente()
{
	regCliente reg;
	int c = 0;
	FILE*ptr;
	ptr = fopen("cliente.dat", "rb");
	cout << "*************************************************************************" << endl;
	cout << " " << "    ID" << "        " << "Nombre " << "            " << "NIT" << "           " << "     EMAIL    " << endl;
	cout << "*************************************************************************" << endl;
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			c++;
			if (reg.estado == 'A')
			{
				cout << c << ".-  " << reg.id_cliente << "    " << reg.nom_cliente << "        " << reg.nit << "        " << reg.email << endl;
				cout << "-------------------------------------------------------------------------" << endl;
			}
			fread(&reg, sizeof(reg), 1, ptr);

		}

		fclose(ptr);
	}
	else
	{
		cout << "Archivo vacio";
	}

}

void Buscar_Cliente(int nroReg)
{
	regCliente reg;
	FILE *ptr;
	ptr = fopen("cliente.dat", "rb");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_cliente << " " << reg.nom_cliente << " " << reg.nit << " " << reg.email << " ";
			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Modificar_Cliente(int nroReg)
{
	regCliente reg;
	char id_cliente_cad[30];
	FILE *ptr;
	ptr = fopen("cliente.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_cliente << " " << reg.nom_cliente << " " << reg.nit << " " << reg.email << " ";

				do{
					do{
						cout << "Digite el Id del Cliente: ";
						gets(id_cliente_cad);
					} while (verificar_entero(id_cliente_cad) == false);

					reg.id_cliente = convertir_enteros(id_cliente_cad);
				} while (id_cliente_existente(reg.id_cliente));

				do{
					cout << "Digite nombre del Cliente: ";
					gets(reg.nom_cliente);
				} while (strlen(reg.nom_cliente) == 0);

				do{
					cout << "Digite el NIT del Cliente: ";
					gets(reg.nit);
				} while (verificar_entero(reg.nit) == false);

				do{
					cout << "digite el email: ";
					gets(reg.email);
				} while (Email_Correcto(reg.email) == false);

				reg.estado = 'A';

				fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
				fwrite(&reg, sizeof(reg), 1, ptr);

			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Borrar_Cliente(int nroReg)
{
	regCliente reg;
	FILE *ptr;
	ptr = fopen("cliente.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			cout << reg.id_cliente << " " << reg.nom_cliente << " " << reg.nit << " " << reg.email << " ";
			reg.estado = 'E';

			fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
			fwrite(&reg, sizeof(reg), 1, ptr);

		}
		else { cout << "el registro fue eliminado"; }
		fclose(ptr);

	}

	else{ cout << "el Registro no existe"; }
}

//###################################################################################################################


//#############################################    Vendedor####################################

void Adicionar_Vendedor()
{
	regVendedor reg;
	FILE*ptr;
	ptr = fopen("vendedor.dat", "ab");
	char id_vend_cad[30];

	do{
		do{
			cout << "Digite el Id del Vendedor: ";
			gets(id_vend_cad);
		} while (verificar_entero(id_vend_cad) == false);

		reg.id_vend = convertir_enteros(id_vend_cad);
	} while (id_vend_existente(reg.id_vend) == true);

	do{
		cout << "Digite nombre del Vendedor: ";
		gets(reg.nom_vend);
	} while (strlen(reg.nom_vend) == 0);

	do{
		cout << "Digite el Telefono  del Vendedor: ";
		gets(reg.telefono);
	} while (Telefono_Correcto(reg.telefono) == false);

	do{
		cout << "digite el email: ";
		gets(reg.email);
	} while (Email_Correcto(reg.email) == false);


	reg.estado = 'A';

	fwrite(&reg, sizeof(reg), 1, ptr);

	fclose(ptr);
}

void Listado_Vendedor()
{
	regVendedor reg;
	int c = 0;
	FILE*ptr;
	ptr = fopen("vendedor.dat", "rb");
	cout << "*************************************************************************" << endl;
	cout << "      ID" << "         " << "Nombre " << "        " << "Telefono" << "     " << "       Email    " << endl;
	cout << "*************************************************************************" << endl;
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			c++;
			if (reg.estado == 'A')
			{
				cout << c << ".-  " << reg.id_vend << "    " << reg.nom_vend << "        " << reg.telefono << "        " << reg.email << endl;
				cout << "-------------------------------------------------------------------------" << endl;
			}
			fread(&reg, sizeof(reg), 1, ptr);

		}

		fclose(ptr);
	}
	else
	{
		cout << "Archivo vacio";
	}

}

void Buscar_Vendedor(int nroReg)
{
	regVendedor reg;
	FILE *ptr;
	ptr = fopen("vendedor.dat", "rb");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_vend << " " << reg.nom_vend << " " << reg.telefono << " " << reg.email << " ";
			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Modificar_Vendedor(int nroReg)
{
	regVendedor reg;
	char id_vend_cad[30];
	FILE *ptr;
	ptr = fopen("vendedor.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_vend << " " << reg.nom_vend << " " << reg.telefono << " " << reg.email << " ";

				do{
					do{
						cout << "Digite el Id del Vendedor: ";
						gets(id_vend_cad);
					} while (verificar_entero(id_vend_cad) == false);

					reg.id_vend = convertir_enteros(id_vend_cad);
				} while (id_vend_existente(reg.id_vend) == true);

				do{
					cout << "Digite nombre del Vendedor: ";
					gets(reg.nom_vend);
				} while (strlen(reg.nom_vend) == 0);


				do{
					cout << "Digite el Telefono  del Vendedor: ";
					gets(reg.telefono);
				} while (Telefono_Correcto(reg.telefono) == false);

				do{
					cout << "digite el email: ";
					gets(reg.email);
				} while (Email_Correcto(reg.email) == false);


				reg.estado = 'A';
				fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
				fwrite(&reg, sizeof(reg), 1, ptr);

			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Borrar_Vendedor(int nroReg)
{
	regVendedor reg;
	FILE *ptr;
	ptr = fopen("vendedor.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			cout << reg.id_vend << " " << reg.nom_vend << " " << reg.telefono << " " << reg.email << " ";
			reg.estado = 'E';

			fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
			fwrite(&reg, sizeof(reg), 1, ptr);

		}
		else { cout << "el registro fue eliminado"; }
		fclose(ptr);

	}

	else{ cout << "el Registro no existe"; }
}

//###################################################################################################################



//#############################################    Automovil ##########################################

void Adicionar_Auto()
{
	regAuto reg;
	FILE*ptr;
	char id_cliente_cad[30];
	int aux;
	ptr = fopen("auto.dat", "ab");
	char id_auto_cad[30];

	do{
		do{
			cout << "Digite el Id del Auto: ";
			gets(id_auto_cad);
		} while (verificar_entero(id_auto_cad) == false);

		reg.id_auto = convertir_enteros(id_auto_cad);
	} while (id_auto_existente(reg.id_auto) == true);

	do{
		cout << "Digite la placa del Auto: ";
		gets(reg.placa);
	} while ((strlen(reg.placa) == 0) || (Placa_Correcto(reg.placa) == false));

	do{
		do{
			cout << "Digite el Id del Cliente :";
			gets(id_cliente_cad);
		} while (verificar_entero(id_cliente_cad) == false);

		reg.id_cliente = convertir_enteros(id_cliente_cad);
	} while (id_cliente_existente(reg.id_cliente) == false);

	reg.estado = 'A';

	fwrite(&reg, sizeof(reg), 1, ptr);

	fclose(ptr);
}

void Listado_Auto()
{
	regAuto reg;
	int c = 0;
	FILE*ptr;
	ptr = fopen("auto.dat", "rb");
	cout << "****************************************************************" << endl;
	cout << "     ID" << "    " << "        Placa " << "           " << "ID cliente" << "    " << endl;
	cout << "****************************************************************" << endl;
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			c++;
			if (reg.estado == 'A')
			{
				cout << c << ".-  " << reg.id_auto << "    " << reg.placa << "        " << reg.id_cliente << endl;
				cout << "----------------------------------------------------------------" << endl;
			}
			fread(&reg, sizeof(reg), 1, ptr);

		}

		fclose(ptr);
	}
	else
	{
		cout << "Archivo vacio";
	}
}

void Buscar_Auto(int nroReg)
{
	regAuto reg;
	FILE *ptr;
	ptr = fopen("auto.dat", "rb");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_auto << " " << reg.placa << " " << reg.id_cliente << " ";
			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Modificar_Auto(int nroReg)
{
	regAuto reg;
	int aux;
	char id_auto_cad[30], id_cliente_cad[30];
	FILE *ptr;
	ptr = fopen("auto.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_auto << " " << reg.placa << " " << reg.id_cliente << " " << " ";

				do{
					do{
						do{
							cout << "Digite el Id del Auto: ";
							gets(id_auto_cad);
						} while (verificar_entero(id_auto_cad) == false);

						reg.id_auto = convertir_enteros(id_auto_cad);
					} while (id_auto_existente(reg.id_auto) == true);
					do{
						cout << "Digite la placa del Auto: ";
						gets(reg.placa);
					} while ((strlen(reg.placa) == 0) || (Placa_Correcto(reg.placa) == false));

					do{
						cout << "Digite el Id del Cliente :";
						gets(id_cliente_cad);
					} while (verificar_entero(id_cliente_cad) == false);

					aux = convertir_enteros(id_auto_cad);
				} while (id_cliente_existente(aux) == false);

				reg.estado = 'A';


				fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
				fwrite(&reg, sizeof(reg), 1, ptr);

			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Borrar_Auto(int nroReg)
{
	regAuto reg;
	FILE *ptr;
	ptr = fopen("auto.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			cout << reg.id_auto << " " << reg.placa << " " << reg.id_cliente << " ";
			reg.estado = 'E';

			fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
			fwrite(&reg, sizeof(reg), 1, ptr);

		}
		else { cout << "el registro fue eliminado"; }
		fclose(ptr);

	}

	else{ cout << "el Registro no existe"; }
}

//##################################################################################################



//#############################################    BOMBA ##########################################

void Adicionar_Bomba()
{
	regBomba reg;
	FILE*ptr;
	char id_prod_cad[30], id_vend_cad[30];
	ptr = fopen("bomba.dat", "ab");
	char id_bomba_cad[30];

	do{
		do{
			cout << "Digite el Id del Bomba: ";
			gets(id_bomba_cad);
		} while (verificar_entero(id_bomba_cad) == false);

		reg.id_bomba = convertir_enteros(id_bomba_cad);
	} while (id_bomba_existente(reg.id_bomba) == true);

	do{
		cout << "Digite la descripcion del Bomba: ";
		gets(reg.descripcion);
	} while (strlen(reg.descripcion) == 0);

	do{
		do{
			cout << "Digite el Id del prod: ";
			gets(id_prod_cad);
		} while (verificar_entero(id_prod_cad) == false);

		reg.id_prod = convertir_enteros(id_prod_cad);
	} while (id_prod_existente(reg.id_prod) == false);

	do{
		do{
			cout << "Digite el Id del Vendedor: ";
			gets(id_vend_cad);
		} while (verificar_entero(id_vend_cad) == false);

		reg.id_vend = convertir_enteros(id_vend_cad);
	} while (id_vend_existente(reg.id_vend) == false);

	reg.estado = 'A';

	fwrite(&reg, sizeof(reg), 1, ptr);

	fclose(ptr);
}

void Listado_Bomba()
{
	regBomba reg;
	int c = 0;
	FILE*ptr;
	ptr = fopen("bomba.dat", "rb");
	cout << "*************************************************************************" << endl;
	cout << "\tID" << "    " << "Descripcion " << "     " << "    ID Prod" << "     " << "       ID Vend" << "    " << endl;
	cout << "*************************************************************************" << endl;
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			c++;
			if (reg.estado == 'A')
			{
				cout << c << ".- \t" << reg.id_bomba << "\t" << reg.descripcion << "\t        " << reg.id_prod << "\t" << "\t" << reg.id_vend << endl;
				cout << "-------------------------------------------------------------------------" << endl;
			}
			fread(&reg, sizeof(reg), 1, ptr);

		}
		fclose(ptr);
	}
	else
	{
		cout << "Archivo vacio";
	}
}

void Buscar_Bomba(int nroReg)
{
	regBomba reg;
	FILE *ptr;
	ptr = fopen("bomba.dat", "rb");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_bomba << " " << reg.descripcion << " " << reg.id_prod << " " << " " << reg.id_vend;
			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Modificar_Bomba(int nroReg)
{
	regBomba reg;
	int aux;
	char id_bomba_cad[30], id_vend_cad[30], id_prod_cad[30];
	FILE *ptr;
	ptr = fopen("bomba.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_bomba << " " << reg.descripcion << " " << reg.id_prod << " " << reg.id_vend << " ";

				char id_bomba_cad[30];

				do{
					do{
						do{
							cout << "Digite el Id del Bomba: ";
							gets(id_bomba_cad);
						} while (verificar_entero(id_bomba_cad) == false);

						reg.id_bomba = convertir_enteros(id_bomba_cad);
					} while (id_bomba_existente(reg.id_bomba) == true);

					do{
						cout << "Digite la descripcion del Bomba: ";
						gets(reg.descripcion);
					} while (strlen(reg.descripcion) == 0);

					do{
						cout << "Digite el Id del prod: ";
						gets(id_prod_cad);
					} while (verificar_entero(id_prod_cad) == false);

					reg.id_prod = convertir_enteros(id_prod_cad);
				} while (id_prod_existente(reg.id_prod) == false);

				do{
					do{
						cout << "Digite el Id del Vendedor: ";
						gets(id_vend_cad);
					} while (verificar_entero(id_vend_cad) == false);

					reg.id_vend = convertir_enteros(id_vend_cad);
				} while (id_vend_existente(reg.id_vend) == false);

				reg.estado = 'A';


				fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
				fwrite(&reg, sizeof(reg), 1, ptr);

			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Borrar_Bomba(int nroReg)
{
	regBomba reg;
	FILE *ptr;
	ptr = fopen("Bomba.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			cout << reg.id_bomba << "\t" << reg.descripcion << "\t" << reg.id_prod << "\t" << reg.id_vend;
			reg.estado = 'E';

			fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
			fwrite(&reg, sizeof(reg), 1, ptr);

		}
		else { cout << "el registro fue eliminado"; }
		fclose(ptr);

	}

	else{ cout << "el Registro no existe"; }
}

//##################################################################################################



//#############################################    COMPRA ##########################################

void Adicionar_Compra()
{
	regCompra reg;
	FILE*ptr;
	char id_cant_cad[30], id_prod_cad[30];
	ptr = fopen("compra.dat", "a+b");
	char id_compra_cad[30];

	do{
		do{
			cout << "Digite el Id de la Compra: ";
			gets(id_compra_cad);
		} while (verificar_entero(id_compra_cad) == false);

		reg.id_compra = convertir_enteros(id_compra_cad);
	} while (id_compra_existente(reg.id_compra) == true);

	do{
		cout << "Digite la Fecha (dd/mm/aaaa): ";
		gets(reg.fecha);
	} while ((strlen(reg.fecha) == 0) || (fecha_correcta(reg.fecha) == false));

	do{
		cout << "Digite la cantidad: ";
		gets(id_cant_cad);
	} while (verificar_entero(id_cant_cad) == false);

	reg.cantidad = convertir_enteros(id_cant_cad);

	do{
		do{
			cout << "Digite el Id del Producto:  ";
			gets(id_prod_cad);
		} while (verificar_entero(id_prod_cad) == false);

		reg.id_prod = convertir_enteros(id_prod_cad);
	} while (id_prod_existente(reg.id_prod) == false);

	reg.estado = 'A';

	fwrite(&reg, sizeof(reg), 1, ptr);

	fclose(ptr);

	escribir_stock(reg.cantidad, reg.id_prod);


}

void Listado_Compra()
{
	regCompra reg;
	int c = 0;
	FILE*ptr;
	ptr = fopen("compra.dat", "rb");
	cout << "*************************************************************************" << endl;
	cout << "    ID" << "   " << "    Fecha " << "        " << "    Cantidad " << "    " << "ID Prod" << endl;
	cout << "*************************************************************************" << endl;
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			c++;
			if (reg.estado == 'A')
			{
				cout << c << ".- \t" << reg.id_compra << "    " << reg.fecha << "        " << reg.cantidad << "    \t" << reg.id_prod << endl;
				cout << "-------------------------------------------------------------------------" << endl;
			}
			fread(&reg, sizeof(reg), 1, ptr);

		}
		fclose(ptr);
	}
	else
	{
		cout << "Archivo vacio";
	}
}

void Buscar_Compra(int nroReg)
{
	regCompra reg;
	FILE *ptr;
	ptr = fopen("compra.dat", "rb");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_compra << "    " << reg.fecha << "        " << reg.cantidad << "    " << reg.id_prod << endl;
			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Modificar_Compra(int nroReg)
{
	regCompra reg;
	int aux;
	char id_compra_cad[30], id_prod_cad[30], id_cant_cad[30];
	FILE *ptr;
	ptr = fopen("compra.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_compra << "    " << reg.fecha << "        " << reg.cantidad << "    " << reg.id_prod << endl;
				do{
					do{
						cout << "Digite el Id de la Compra: ";
						gets(id_compra_cad);
					} while (verificar_entero(id_compra_cad) == false);

					reg.id_compra = convertir_enteros(id_compra_cad);
				} while (id_compra_existente(reg.id_compra) == true);
				do{
					cout << "Digite la Fecha(dd/mm/aaaa): ";
					gets(reg.fecha);
				} while ((strlen(reg.fecha) == 0) || (fecha_correcta(reg.fecha) == false));

				do{
					cout << "Digite la cantidad: ";
					gets(id_cant_cad);
				} while (verificar_entero(id_cant_cad) == false);

				reg.cantidad = convertir_enteros(id_cant_cad);

				do{
					do{
						cout << "Digite el Id del Producto:  ";
						gets(id_prod_cad);
					} while (verificar_entero(id_prod_cad) == false);

					reg.id_prod = convertir_enteros(id_prod_cad);
				} while (id_prod_existente(reg.id_prod) == false);

				reg.estado = 'A';


				fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
				fwrite(&reg, sizeof(reg), 1, ptr);

			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Borrar_Compra(int nroReg)
{
	regCompra reg;
	FILE *ptr;
	ptr = fopen("compra.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			cout << reg.id_compra << "    " << reg.fecha << "        " << reg.cantidad << "    " << reg.id_prod << endl;
			reg.estado = 'E';

			fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
			fwrite(&reg, sizeof(reg), 1, ptr);

		}
		else { cout << "el registro fue eliminado"; }
		fclose(ptr);

	}

	else{ cout << "el Registro no existe"; }
}

//##################################################################################################



//#############################################    VENTA ##########################################

void Adicionar_Venta()
{
	regVenta reg;
	FILE*ptr;
	char id_bomba_cad[30], id_auto_cad[30], precio_cad[30], id_cant_cad[30];
	ptr = fopen("venta.dat", "ab");
	char id_venta_cad[30];
	int id_prod_aux;
	do{
		do{
			cout << "Digite el Id de la Venta: ";
			gets(id_venta_cad);
		} while (verificar_entero(id_venta_cad) == false);

		reg.id_venta = convertir_enteros(id_venta_cad);
	} while (id_venta_existente(reg.id_venta) == true);

	do{
		cout << "Digite la fecha de la Venta(dd/mm/aaaa): ";
		gets(reg.fecha);
	} while ((strlen(reg.fecha) == 0) || (fecha_correcta(reg.fecha) == false));

	do{
		cout << "Digite la cantidad: ";
		gets(id_cant_cad);
	} while (verificar_entero(id_cant_cad) == false);

	reg.cantidad = convertir_enteros(id_cant_cad);

	do{
		cout << "Digite el precio del Producto: ";
		gets(precio_cad);
	} while ((verificar_float(precio_cad) == false) || (precio_float(precio_cad) == false));

	reg.precio_unitario = convertir_float(precio_cad);

	do{
		do{
			cout << "Digite el Id del Bomba: ";
			gets(id_bomba_cad);
		} while (verificar_entero(id_bomba_cad) == false);

		reg.id_bomba = convertir_enteros(id_bomba_cad);
	} while (id_bomba_existente(reg.id_bomba) == false);

	do{
		do{
			cout << "Digite el Id del Auto: ";
			gets(id_auto_cad);
		} while (verificar_entero(id_auto_cad) == false);

		reg.id_auto = convertir_enteros(id_auto_cad);
	} while (id_auto_existente(reg.id_auto) == false);

	reg.estado = 'A';

	id_prod_aux = obtener_id_prod_venta_y_bomba(reg.id_bomba);

	if (escribir_cantidad_a_vender(reg.cantidad, id_prod_aux) == true)
	{
		fwrite(&reg, sizeof(reg), 1, ptr);
	}
	fclose(ptr);



}

void Listado_Venta()
{
	regVenta reg;
	int c = 0;
	FILE*ptr;
	ptr = fopen("Venta.dat", "rb");
	cout << "****************************************************************************************" << endl;
	cout << "    ID" << "    " << "Fecha " << "        " << "Cantidad " << "    " << "Precio unitario" << "  " << "ID bomba" << "      " << "ID auto" << endl;
	cout << "****************************************************************************************" << endl;
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			c++;
			if (reg.estado == 'A')
			{
				cout << c << ".- \t" << reg.id_venta << "    " << reg.fecha << "    " << reg.cantidad << "    \t" << reg.precio_unitario << "    \t " << reg.id_bomba << "    \t " << reg.id_auto << endl;
				cout << "----------------------------------------------------------------------------------------" << endl;
			}
			fread(&reg, sizeof(reg), 1, ptr);

		}
		fclose(ptr);
	}
	else
	{
		cout << "Archivo vacio";
	}
}

void Buscar_Venta(int nroReg)
{
	regVenta reg;
	FILE *ptr;
	ptr = fopen("venta.dat", "rb");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << ".- " << reg.id_venta << "    " << reg.fecha << "    " << reg.cantidad << "    " << reg.precio_unitario << "  " << reg.id_bomba << " " << reg.id_auto << endl;
			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Modificar_Venta(int nroReg)
{
	regVenta reg;
	int aux;
	char id_bomba_cad[30], id_auto_cad[30], precio_cad[30], id_cant_cad[30];
	FILE *ptr;
	ptr = fopen("venta.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				cout << reg.id_venta << "    " << reg.fecha << "    " << reg.cantidad << "    " << reg.precio_unitario << "  " << reg.id_bomba << " " << reg.id_auto << endl;

				char id_venta_cad[30];

				do{
					do{
						cout << "Digite el Id del    Venta: ";
						gets(id_venta_cad);
					} while (verificar_entero(id_venta_cad) == false);

					reg.id_venta = convertir_enteros(id_venta_cad);
				} while (id_venta_existente(reg.id_venta) == true);

				do{
					cout << "Digite la fecha de la Venta (dd/mm/aaaa): ";
					gets(reg.fecha);
				} while ((strlen(reg.fecha) == 0) || (fecha_correcta(reg.fecha) == false));

				do{
					cout << "Digite la cantidad: ";
					gets(id_cant_cad);
				} while (verificar_entero(id_cant_cad) == false);

				reg.cantidad = convertir_enteros(id_cant_cad);

				do{
					cout << "Digite el precio del Producto: ";
					gets(precio_cad);
				} while ((verificar_float(precio_cad) == false) || (precio_float(precio_cad) == false));

				reg.precio_unitario = convertir_float(precio_cad);

				do{
					do{
						cout << "Digite el Id del Bomba: ";
						gets(id_bomba_cad);
					} while (verificar_entero(id_bomba_cad) == false);

					reg.id_bomba = convertir_enteros(id_bomba_cad);
				} while (id_bomba_existente(reg.id_bomba) == false);

				do{
					do{
						cout << "Digite el Id del Auto: ";
						gets(id_auto_cad);
					} while (verificar_entero(id_auto_cad) == false);

					reg.id_auto = convertir_enteros(id_auto_cad);
				} while (id_auto_existente(reg.id_auto) == false);

				reg.estado = 'A';


				fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
				fwrite(&reg, sizeof(reg), 1, ptr);

			}
			else { cout << "el registro fue eliminado"; }

		}
		fclose(ptr);
	}
	else{ cout << "el Registro no existe"; }

}

void Borrar_Venta(int nroReg)
{
	regVenta reg;
	FILE *ptr;
	ptr = fopen("Venta.dat", "r+b");
	if (ptr != NULL)
	{
		fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
		fread(&reg, sizeof(reg), 1, ptr);
		if (feof(ptr) == false)
		{
			cout << nroReg << ".- " << reg.id_venta << "    " << reg.fecha << "    " << reg.cantidad << "    " << reg.precio_unitario << "  " << reg.id_bomba << " " << reg.id_auto << endl;
			reg.estado = 'E';

			fseek(ptr, (nroReg - 1)*sizeof(reg), SEEK_SET);
			fwrite(&reg, sizeof(reg), 1, ptr);

		}
		else { cout << "el registro fue eliminado"; }
		fclose(ptr);

	}

	else{ cout << "el Registro no existe"; }
}

//##################################################################################################


//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


///////////////////////////REPORTE ARCHIVOS TIPO TEXTO///////////////////////////////////////

void Reporte_Venta_texto(int ini, int fin, int id_prod)
{
	regVenta reg;

	regProducto regProd;

	int id_prod_obtenido;
	float total = 0;

	FILE*ptr, *ptr_txt;
	ptr = fopen("venta.dat", "rb");
	ptr_txt = fopen("venta.txt", "wt");

	fputs("\n\n ====================================================================================================", ptr_txt);
	fputs("\n                 **REPORTE DE VENTAS**        ", ptr_txt);
	fputs("\n-----------------------------------------------------------------------------------------------------", ptr_txt);
	fputs("\nId Vent        Fecha        NomProd           Cantidad         PrecioUnitario       PrecioTotal", ptr_txt);
	fputs("\n-----------------------------------------------------------------------------------------------------", ptr_txt);

	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);

		while (feof(ptr) == false)
		{
			if (ini <= convertir_fecha(reg.fecha) && (fin >= convertir_fecha(reg.fecha)) && (reg.estado == 'A'))
			{
				id_prod_obtenido = obtener_id_prod_venta_y_bomba(reg.id_bomba);

				regProd = obtener_reg_producto(id_prod_obtenido);
				if (regProd.id_prod == id_prod)
				{
					fprintf(ptr_txt, "\n%3d        %10s    %10s        %4d        %0.2f        %0.2f ", reg.id_venta, reg.fecha, regProd.nom_prod, reg.cantidad, regProd.precio, reg.cantidad*regProd.precio);
					fputs("\n*****************************************************************************************************", ptr_txt);
					total = total + reg.cantidad*regProd.precio;
				}
			}
			fread(&reg, sizeof(reg), 1, ptr);
		}

		fputs("\n===================================================================================", ptr_txt);
		fclose(ptr);
		fprintf(ptr_txt, "\nel total es: %0.2f", total);

		fclose(ptr_txt);
	}

	else{ cout << "\nel archivo no existe"; }
}

void Reporte_Compra_texto(int ini, int fin, int id_prod)
{
	regCompra reg;

	regProducto regProd;

	int id_prod_obtenido;
	float total = 0;

	FILE*ptr;
	FILE*ptr_txt;

	ptr = fopen("compra.dat", "rb");
	ptr_txt = fopen("compra.txt", "wt");

	fputs("\n\n ===================================================================================================", ptr_txt);
	fputs("\n                        **REPORTE DE COMPRAS**        ", ptr_txt);
	fputs("\n------------------------------------------------------------------------------------------------------", ptr_txt);
	fputs("\nID Compra    Fecha              NomProd        Cantidad    Precio        PrecioTotal", ptr_txt);
	fputs("\n------------------------------------------------------------------------------------------------------", ptr_txt);

	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);

		while (feof(ptr) == false)
		{
			if (ini <= convertir_fecha(reg.fecha) && (fin >= convertir_fecha(reg.fecha)) && (reg.estado == 'A'))
			{

				regProd = obtener_reg_producto(id_prod);

				if (reg.id_prod == id_prod)
				{
					fprintf(ptr_txt, "\n%3d        %10s    %10s        %4d        %0.2f        %0.2f    ", reg.id_compra, reg.fecha, regProd.nom_prod, reg.cantidad, regProd.precio, reg.cantidad*regProd.precio);
					fputs("\n*****************************************************************************************************", ptr_txt);
					total = total + reg.cantidad*regProd.precio;
				}
			}
			fread(&reg, sizeof(reg), 1, ptr);
		}

		fputs("\n==================================================================================================", ptr_txt);
		fclose(ptr);
		fprintf(ptr_txt, "\nEl Total Es: %f", total);
		fclose(ptr_txt);
	}

	else{ cout << "el archivo no existe"; }
}

void Reporte_cliente_que_mas_compra_texto(int ini, int fin)
{
	int id_cliente_mayor;
	float monto;

	id_cliente_mayor = Retorna_id_cliente_mayor(ini, fin);

	regVenta reg;

	regCliente regCliente;

	regAuto regAuto;

	FILE*ptr;
	FILE*ptr_txt;
	ptr = fopen("venta.dat", "rb");
	ptr_txt = fopen("cliente_que_mas_compra.txt", "wt");

	fputs("\n\n =====================================================================================", ptr_txt);
	fputs("\n                 **REPORTE DE CLIENTE QUE MAS COMPRA**        ", ptr_txt);
	fputs("\n----------------------------------------------------------------------------------------", ptr_txt);
	fputs("\nID Venta    Fecha             NomCliente        IDAuto        Monto    ", ptr_txt);
	fputs("\n----------------------------------------------------------------------------------------", ptr_txt);


	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);

		while (feof(ptr) == false)
		{

			if ((ini <= convertir_fecha(reg.fecha)) && (fin >= convertir_fecha(reg.fecha)) && (reg.estado == 'A'))
			{

				regAuto = obtener_reg_auto(reg.id_auto);
				regCliente = obtener_reg_cliente(regAuto.id_cliente);

				if (regAuto.estado == 'A'&&regCliente.estado == 'A')
				{
					if (regCliente.id_cliente == id_cliente_mayor)
					{
						fprintf(ptr_txt, "\n%3d        %10s        %s        %3d        %0.2f    ", reg.id_venta, reg.fecha, regCliente.nom_cliente, reg.id_auto, reg.precio_unitario*reg.cantidad);
						fputs("****************************************************************************************", ptr_txt);

					}
				}


			}
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
		monto = retorna_monto_total_cliente(ini, fin, id_cliente_mayor);
		fprintf(ptr_txt, "\nEl monto total que compro es:    %f", monto);

		fclose(ptr_txt);
	}

	else{ cout << "el archivo no existe"; }
}

///////////////////////////////////////////////////////////////////////////////////////////


//#############################################    REPORTES ##########################################

regProducto obtener_reg_producto(int id_prod)
{
	regProducto reg;
	FILE*ptr;
	ptr = fopen("producto.dat", "rb");

	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);

		while ((feof(ptr) == false) && (reg.id_prod != id_prod))
		{
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
	}

	else{ cout << "el archivo no existe "; }

	return(reg);
}

void Reporte_Venta(int ini, int fin, int id_prod)
{
	regVenta reg;

	regProducto regProd;

	int id_prod_obtenido;
	float total = 0;

	FILE*ptr;
	ptr = fopen("venta.dat", "rb");

	cout << "\n\n ====================================================================================================";
	cout << "\n                 **REPORTE DE VENTAS**        ";
	cout << "\n-----------------------------------------------------------------------------------------------------";
	cout << "\nId Vent    Fecha        NomProd           Cantidad         PrecioUnitario          PrecioTotal";
	cout << "\n-----------------------------------------------------------------------------------------------------";

	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);

		while (feof(ptr) == false)
		{
			if (ini <= convertir_fecha(reg.fecha) && (fin >= convertir_fecha(reg.fecha)) && (reg.estado == 'A'))
			{
				id_prod_obtenido = obtener_id_prod_venta_y_bomba(reg.id_bomba);

				regProd = obtener_reg_producto(id_prod_obtenido);
				if (regProd.id_prod == id_prod)
				{
					cout << endl << "" << reg.id_venta << "\t" << reg.fecha << "\t" << regProd.nom_prod << "        \t" << reg.cantidad << "         \t" << regProd.precio << "               \t" << reg.cantidad*regProd.precio << endl;
					cout << "*****************************************************************************************************" << endl;
					total = total + reg.cantidad*regProd.precio;
				}
			}
			fread(&reg, sizeof(reg), 1, ptr);
		}

		cout << "\n===================================================================================";
		fclose(ptr);
		cout << endl << "el total es: " << total;

		Monto_Literal(total);

		Reporte_Venta_texto(ini, fin, id_prod);

	}

	else{ cout << "el archivo no existe"; }
}

void Reporte_Compra(int ini, int fin, int id_prod)
{
	regCompra reg;

	regProducto regProd;

	int id_prod_obtenido;
	float total = 0;

	FILE*ptr;
	ptr = fopen("compra.dat", "rb");

	cout << "\n\n ===================================================================================================";
	cout << "\n                        **REPORTE DE COMPRAS**        ";
	cout << "\n------------------------------------------------------------------------------------------------------";
	cout << "\nID Compra    Fecha              NomProd        Cantidad    Precio        PrecioTotal";
	cout << "\n------------------------------------------------------------------------------------------------------";

	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);

		while (feof(ptr) == false)
		{
			if (ini <= convertir_fecha(reg.fecha) && (fin >= convertir_fecha(reg.fecha)) && (reg.estado == 'A'))
			{

				regProd = obtener_reg_producto(id_prod);

				if (reg.id_prod == id_prod)
				{
					cout << endl << "" << reg.id_compra << "      \t" << reg.fecha << "      \t" << regProd.nom_prod << "      \t" << reg.cantidad << "      \t" << regProd.precio << "      \t" << reg.cantidad*regProd.precio << endl;
					cout << "*****************************************************************************************************" << endl;
					total = total + reg.cantidad*regProd.precio;
				}
			}
			fread(&reg, sizeof(reg), 1, ptr);
		}

		cout << "\n==================================================================================================";
		fclose(ptr);
		cout << endl << "El Total Es: " << total;

		Monto_Literal(total);

		Reporte_Compra_texto(ini, fin, id_prod);

	}

	else{ cout << "el archivo no existe"; }

}


/////////////////////////REPORTE DEL CLIENTE QUE MAS COMPRA//////////////////////

regAuto obtener_reg_auto(int id_auto)
{
	regAuto reg;
	FILE*ptr;
	ptr = fopen("auto.dat", "rb");

	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);

		while ((feof(ptr) == false) && (reg.id_auto != id_auto))//&&(reg.estado!='A'))
		{
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
	}

	else{ cout << "el archivo no existe "; }

	return(reg);
}

regCliente obtener_reg_cliente(int id_cliente)
{
	regCliente reg;
	FILE*ptr;
	ptr = fopen("cliente.dat", "rb");

	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);

		while ((feof(ptr) == false) && (reg.id_cliente != id_cliente))//&&(reg.estado!='A'))
		{
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
	}

	else{ cout << "el archivo no existe "; }

	return(reg);
}


float Retorna_monto_auto(int ini, int fin, int id_auto)
{
	float monto = 0;

	regVenta regVenta;

	FILE*ptr;

	ptr = fopen("venta.dat", "rb");

	if (ptr != NULL)
	{
		fread(&regVenta, sizeof(regVenta), 1, ptr);

		while (feof(ptr) == false)
		{

			if ((ini <= convertir_fecha(regVenta.fecha)) && (fin >= convertir_fecha(regVenta.fecha)) && (regVenta.estado == 'A'))
			{

				if (regVenta.id_auto == id_auto)
				{
					monto = monto + (regVenta.precio_unitario*regVenta.cantidad);
				}
			}
			fread(&regVenta, sizeof(regVenta), 1, ptr);
		}
	}
	else{ cout << "el archivo no existe"; }

	return(monto);
}

float retorna_monto_total_cliente(int ini, int  fin, int id_cliente)
{
	float monto, total;

	regAuto reg;

	FILE*ptr;

	ptr = fopen("auto.dat", "rb");

	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			if (reg.id_cliente == id_cliente&&reg.estado == 'A')
			{
				monto = Retorna_monto_auto(ini, fin, reg.id_auto);

				total = total + monto;
			}
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
	}

	return(total);
}

int Retorna_id_cliente_mayor(int ini, int fin)
{
	float mayor = 0, total;
	int id_cliente_retorno = -1;
	regCliente reg;

	FILE*ptr;

	ptr = fopen("cliente.dat", "rb");

	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while (feof(ptr) == false)
		{
			if (reg.estado == 'A')
			{
				total = retorna_monto_total_cliente(ini, fin, reg.id_cliente);

				if (total>mayor)
				{
					mayor = total;
					id_cliente_retorno = reg.id_cliente;
				}


			}
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);
	}

	return(id_cliente_retorno);
}

void Reporte_cliente_que_mas_compra(int ini, int fin)
{
	int id_cliente_mayor;
	float monto;

	id_cliente_mayor = Retorna_id_cliente_mayor(ini, fin);

	regVenta reg;

	regCliente regCliente;

	regAuto regAuto;

	cout << "\n\n =====================================================================================";
	cout << "\n                 **REPORTE DE CLIENTE QUE MAS COMPRA**        ";
	cout << "\n----------------------------------------------------------------------------------------";
	cout << "\nID Venta    Fecha         NomCliente        IDAuto    Monto    ";
	cout << endl << "\n----------------------------------------------------------------------------------------";

	FILE*ptr;
	ptr = fopen("venta.dat", "rb");
	if (ptr != NULL)
	{
		fread(&reg, sizeof(reg), 1, ptr);

		while (feof(ptr) == false)
		{

			if ((ini <= convertir_fecha(reg.fecha)) && (fin >= convertir_fecha(reg.fecha)) && (reg.estado == 'A'))
			{

				regAuto = obtener_reg_auto(reg.id_auto);
				regCliente = obtener_reg_cliente(regAuto.id_cliente);

				if (regAuto.estado == 'A'&&regCliente.estado == 'A')
				{
					if (regCliente.id_cliente == id_cliente_mayor)
					{
						cout << endl << "" << reg.id_venta << "      \t" << reg.fecha << "\t" << regCliente.nom_cliente << "\t" << reg.id_auto << "\t" << reg.precio_unitario*reg.cantidad << endl;
						cout << "****************************************************************************************" << endl;

					}
				}


			}
			fread(&reg, sizeof(reg), 1, ptr);
		}
		fclose(ptr);

		monto = retorna_monto_total_cliente(ini, fin, id_cliente_mayor);

		cout << endl << "El monto total que compro es:    " << monto;

		Monto_Literal(monto);

		Reporte_cliente_que_mas_compra_texto(ini, fin);
	}

	else{ cout << "el archivo no existe"; }
}

//////////////////////////////////////////////////////////////////////////////////////////////

//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

//===============================================================MENU ======================================================
void crearArchivo(char nomArchivo[])
{
	FILE*ptr;
	ptr = fopen(nomArchivo, "wb");
	fclose(ptr);
}

void Menu_Producto()
{
	char sol[30];
	int op, nroReg;
	char op_cad[30];
	do{

		cout << endl << "==================================== PRODUCTO ====================================";
		cout << endl << "1. Adicionar ";
		cout << endl << "2. Modificar";
		cout << endl << "3. Borrar";
		cout << endl << "4. Listado";
		cout << endl << "5. Buscar";
		cout << endl << "0. atras";
		do{
			cout << endl << "Digite alguna opcion: ";
			gets(op_cad);
		} while (verificar_entero(op_cad) == false);
		op = convertir_enteros(op_cad);
		switch (op){

		case 1:   Adicionar_Producto();
			break;

		case 2:        do{
						   cout << "Digite el Registro que desea modificar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Modificar_Producto(nroReg);
			break;

		case 3:        do{
						   cout << "Digite el Registro que desea borrar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Borrar_Producto(nroReg);
			break;

		case 4:        Listado_Producto();
			break;

		case 5:        do{
						   cout << "Digite el Registro que desea buscar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Buscar_Producto(nroReg);
			break;
		}

	} while (op != 0);
}
void Menu_Cliente()
{
	char sol[30];
	int op, nroReg;
	char op_cad[30];
	do{

		cout << endl << "==================================== CLIENTE ====================================";
		cout << endl << "1. Adicionar ";
		cout << endl << "2. Modificar";
		cout << endl << "3. Borrar";
		cout << endl << "4. Listado";
		cout << endl << "5. Buscar";
		cout << endl << "0. atras";
		do{
			cout << endl << "Digite alguna opcion: ";
			gets(op_cad);
		} while (verificar_entero(op_cad) == false);
		op = convertir_enteros(op_cad);
		switch (op){

		case 1:   Adicionar_Cliente();
			break;

		case 2:        do{
						   cout << "Digite el Registro que desea modificar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Modificar_Cliente(nroReg);
			break;

		case 3:        do{
						   cout << "Digite el Registro que desea borrar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Borrar_Cliente(nroReg);
			break;

		case 4:        Listado_Cliente();
			break;

		case 5:        do{
						   cout << "Digite el Registro que desea buscar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Buscar_Cliente(nroReg);
			break;
		}

	} while (op != 0);
}
void Menu_Vendedor()
{
	char sol[30];
	int op, nroReg;
	char op_cad[30];
	do{

		cout << endl << "==================================== VENDEDOR ====================================";
		cout << endl << "1. Adicionar ";
		cout << endl << "2. Modificar";
		cout << endl << "3. Borrar";
		cout << endl << "4. Listado";
		cout << endl << "5. Buscar";
		cout << endl << "0. atras";
		do{
			cout << endl << "Digite alguna opcion: ";
			gets(op_cad);
		} while (verificar_entero(op_cad) == false);
		op = convertir_enteros(op_cad);
		switch (op){

		case 1:   Adicionar_Vendedor();
			break;

		case 2:        do{
						   cout << "Digite el Registro que desea modificar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Modificar_Vendedor(nroReg);
			break;

		case 3:        do{
						   cout << "Digite el Registro que desea borrar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Borrar_Vendedor(nroReg);
			break;

		case 4:        Listado_Vendedor();
			break;

		case 5:        do{
						   cout << "Digite el Registro que desea buscar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Buscar_Vendedor(nroReg);
			break;
		}

	} while (op != 0);
}
void Menu_Automovil()
{
	char sol[30];
	int op, nroReg;
	char op_cad[30];
	do{

		cout << endl << "==================================== AUTOMOVIL ====================================";
		cout << endl << "1. Adicionar ";
		cout << endl << "2. Modificar";
		cout << endl << "3. Borrar";
		cout << endl << "4. Listado";
		cout << endl << "5. Buscar";
		cout << endl << "0. atras";
		do{
			cout << endl << "Digite alguna opcion: ";
			gets(op_cad);
		} while (verificar_entero(op_cad) == false);
		op = convertir_enteros(op_cad);
		switch (op){

		case 1:        Adicionar_Auto();
			break;

		case 2:        do{
						   cout << "Digite el Registro que desea modificar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Modificar_Auto(nroReg);
			break;

		case 3:        do{
						   cout << "Digite el Registro que desea borrar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Borrar_Auto(nroReg);
			break;

		case 4:        Listado_Auto();
			break;

		case 5:        do{
						   cout << "Digite el Registro que desea buscar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Buscar_Auto(nroReg);
			break;
		}

	} while (op != 0);
}
void Menu_Bomba()
{
	char sol[30];
	int op, nroReg;
	char op_cad[30];
	do{
		cout << endl << "==================================== BOMBA ====================================";
		cout << endl << "1. Adicionar ";
		cout << endl << "2. Modificar";
		cout << endl << "3. Borrar";
		cout << endl << "4. Listado";
		cout << endl << "5. Buscar";
		cout << endl << "0. atras";
		do{
			cout << endl << "Digite alguna opcion: ";
			gets(op_cad);
		} while (verificar_entero(op_cad) == false);
		op = convertir_enteros(op_cad);

		switch (op){

		case 1:        Adicionar_Bomba();
			break;

		case 2:        do{
						   cout << "Digite el Registro que desea modificar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Modificar_Bomba(nroReg);
			break;

		case 3:        do{
						   cout << "Digite el Registro que desea borrar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Borrar_Bomba(nroReg);
			break;

		case 4:        Listado_Bomba();
			break;

		case 5:        do{
						   cout << "Digite el Registro que desea buscar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Buscar_Bomba(nroReg);
			break;
		}

	} while (op != 0);
}
void Menu_Compra()
{
	char sol[30];
	int op, nroReg;
	char op_cad[30];
	do{

		cout << endl << "==================================== COMPRA ====================================";
		cout << endl << "1. Adicionar ";
		cout << endl << "2. Modificar";
		cout << endl << "3. Borrar";
		cout << endl << "4. Listado";
		cout << endl << "5. Buscar";
		cout << endl << "0. atras";
		do{
			cout << endl << "Digite alguna opcion: ";
			gets(op_cad);
		} while (verificar_entero(op_cad) == false);
		op = convertir_enteros(op_cad);

		switch (op){

		case 1:        Adicionar_Compra();
			break;

		case 2:        do{
						   cout << "Digite el Registro que desea modificar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Modificar_Compra(nroReg);
			break;

		case 3:        do{
						   cout << "Digite el Registro que desea borrar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Borrar_Compra(nroReg);
			break;

		case 4:        Listado_Compra();
			break;

		case 5:        do{
						   cout << "Digite el Registro que desea buscar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Buscar_Compra(nroReg);
			break;
		}

	} while (op != 0);
}
void Menu_Venta()
{
	int op, nroReg;
	char op_cad[30], sol[30];
	do{

		cout << endl << "==================================== VENTA ====================================";
		cout << endl << "1. Adicionar ";
		cout << endl << "2. Modificar";
		cout << endl << "3. Borrar";
		cout << endl << "4. Listado";
		cout << endl << "5. Buscar";
		cout << endl << "0. atras";
		do{
			cout << endl << "Digite alguna opcion: ";
			gets(op_cad);
		} while (verificar_entero(op_cad) == false);
		op = convertir_enteros(op_cad);
		switch (op){

		case 1:        Adicionar_Venta();
			break;

		case 2:        do{
						   cout << "Digite el Registro que desea modificar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Modificar_Venta(nroReg);
			break;

		case 3:        do{
						   cout << "Digite el Registro que desea borrar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Borrar_Venta(nroReg);
			break;

		case 4:        Listado_Venta();
			break;

		case 5:        do{
						   cout << "Digite el Registro que desea buscar: ";
						   gets(sol);
		} while (verificar_entero(sol) == false);

			nroReg = convertir_enteros(sol);

			Buscar_Venta(nroReg);
			break;
		}

	} while (op != 0);
}
void Menu_Reportes()
{
	int op, nroReg;
	char op_cad[30], sol[30];

	char fecha_ini_cad[10], fecha_fin_cad[10], id_prod_cad[10];
	int ini, fin, id_prod;


	do{
		cout << endl << "==================================== Reportes ====================================";
		cout << endl << "1. Reporte de Venta";
		cout << endl << "2. Reporte de Compra";
		cout << endl << "3. Reporte de Cliente que mas Compra";
		cout << endl << "0. atras";

		do{
			cout << endl << "Digite alguna opcion: ";
			gets(op_cad);
		} while (verificar_entero(op_cad) == false);
		op = convertir_enteros(op_cad);
		switch (op){

		case 1:        do{
						   cout << endl << "Digite la Fecha inicial (dd/mm/aaaa): ";
						   gets(fecha_ini_cad);
		} while ((strlen(fecha_ini_cad) == 0) || (fecha_correcta(fecha_ini_cad) == false));

			ini = convertir_fecha(fecha_ini_cad);

			do{
				do{
					cout << endl << "Digite la Fecha final(dd/mm/aaaa): ";
					gets(fecha_fin_cad);
				} while ((strlen(fecha_fin_cad) == 0) || (fecha_correcta(fecha_fin_cad) == false));

				fin = convertir_fecha(fecha_fin_cad);

			} while (ini>fin);

			do{
				cout << endl << "Digite el Id del producto: ";
				gets(id_prod_cad);
			} while (verificar_entero(id_prod_cad) == false);

			id_prod = convertir_enteros(id_prod_cad);

			Reporte_Venta(ini, fin, id_prod);
			break;

		case 2:        do{
						   cout << endl << "Digite la Fecha inicial (dd/mm/aaaa): ";
						   gets(fecha_ini_cad);
		} while ((strlen(fecha_ini_cad) == 0) || (fecha_correcta(fecha_ini_cad) == false));

			ini = convertir_fecha(fecha_ini_cad);

			do{
				do{
					cout << endl << "Digite la Fecha final(dd/mm/aaaa): ";
					gets(fecha_fin_cad);
				} while ((strlen(fecha_fin_cad) == 0) || (fecha_correcta(fecha_fin_cad) == false));

				fin = convertir_fecha(fecha_fin_cad);

			} while (ini>fin);

			do{
				cout << endl << "Digite el Id del producto: ";
				gets(id_prod_cad);
			} while (verificar_entero(id_prod_cad) == false);

			id_prod = convertir_enteros(id_prod_cad);

			Reporte_Compra(ini, fin, id_prod);
			break;

		case 3:        do{
						   cout << endl << "Digite la Fecha inicial (dd/mm/aaaa): ";
						   gets(fecha_ini_cad);
		} while ((strlen(fecha_ini_cad) == 0) || (fecha_correcta(fecha_ini_cad) == false));

			ini = convertir_fecha(fecha_ini_cad);

			do{
				do{
					cout << endl << "Digite la Fecha final(dd/mm/aaaa): ";
					gets(fecha_fin_cad);
				} while ((strlen(fecha_fin_cad) == 0) || (fecha_correcta(fecha_fin_cad) == false));

				fin = convertir_fecha(fecha_fin_cad);

			} while (ini>fin);

			Reporte_cliente_que_mas_compra(ini, fin);
			break;
		}

	} while (op != 0);
}
void mostrarPantalla(){
	int i, j;
	for (i = 0; i<COL; i++){
		for (j = 0; j<FIL; j++){
			cout << pantalla[i][j];
		}
		cout << endl;
	}
}


void logo(){
	cout << "\t\t\t" << "PROYECTO SURTIDOR\n";
	cout << "\t\t" << "MATERIA    : ALGORITMOS Y RPOGRAMACION I\n";
	cout << "\t\t" << "INTEGRANTES:\n";
	cout << "\t\t\t" << "Sebastian Peralta Cadima\n";
	cout << "\t\t\t" << "Andres Zamorano Ballivian\n";
	cout << "\t\t\t" << "Camilo Andres Sanchez Torrez\n";
	cout << "\t\t\t" << "Carlos Gabriel Moreno Rojas\n";
	cout << "\t\t\t" << "William Sigfredo Pena Vargas\n";
	cout << "\t\t\t" << "David Florero Robles\n";
}



void lineahorizontal(int x1, int y1, int x2, int y2){
	int i;
	for (i = y1; i<y2; i++){
		pantalla[x1][i] = char(176);
	}
}

void lineavertical(int x1, int y1, int x2, int y2){
	int i;
	for (i = x1; i<x2; i++){
		pantalla[i][y1] = char(176);
	}
}



void verticalesU(int y1, int y2, int x1){
	int i;
	for (i = y1; i<y2; i++){
		pantalla[i][x1] = char(85);
	}
}
void horizontalesU(int x1, int x2, int y1){
	int i;
	for (i = x1; i<x2; i++){
		pantalla[y1][i] = char(85);
	}
}

void verticalesP(int y1, int y2, int x1){
	int i;
	for (i = y1; i<y2; i++){
		pantalla[i][x1] = char(80);
	}
}

void horizontalesP(int x1, int x2, int y1){
	int i;
	for (i = x1; i<x2; i++){
		pantalla[y1][i] = char(80);
	}
}

void verticaleS(int y1, int y2, int x1){
	int i;
	for (i = y1; i<y2; i++){
		pantalla[i][x1] = char(83);
	}
}
void horizontaleS(int x1, int x2, int y1){
	int i;
	for (i = x1; i<x2; i++){
		pantalla[y1][i] = char(83);
	}
}
void verticalesA(int y1, int y2, int x1){
	int i;
	for (i = y1; i<y2; i++){
		pantalla[i][x1] = char(65);
	}
}
void horizontalesA(int x1, int x2, int y1){
	int i;
	for (i = x1; i<x2; i++){
		pantalla[y1][i] = char(65);
	}
}


void main()
{
	int op;
	char op_cad[30];

	verticalesU(2, 7, 20);
	verticalesU(2, 7, 25);
	horizontalesU(21, 25, 7);
	verticalesP(2, 8, 29);
	verticalesP(2, 5, 35);
	horizontalesP(29, 35, 2);
	horizontalesP(29, 35, 4);
	verticaleS(2, 5, 39);
	verticaleS(5, 8, 45);
	horizontaleS(39, 46, 2);
	horizontaleS(39, 46, 5);
	horizontaleS(39, 46, 7);
	verticalesA(2, 8, 49);
	verticalesA(2, 8, 56);
	horizontalesA(49, 56, 2);
	horizontalesA(49, 56, 4);
	lineahorizontal(0, 0, 5, 70);
	lineavertical(1, 0, 8, 0);
	lineahorizontal(8, 0, 5, 70);
	lineavertical(1, 69, 8, 70);

	mostrarPantalla();
	logo();
	getch();
	system("cls");
	do{
		do{
			cout << endl << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
			cout << endl << "==================================== PROYECTO SURTIDOR ====================================";
			cout << endl << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
			cout << endl << "==================================== ***BIENVENIDO**** ====================================";
			cout << endl << "1. Producto ";
			cout << endl << "2. Cliente ";
			cout << endl << "3. Vendedor";
			cout << endl << "4. Automovil";
			cout << endl << "5. Bomba ";
			cout << endl << "6. Compra ";
			cout << endl << "7. Venta ";
			cout << endl << "8. Reportes : ";
			cout << endl << "0. Salir ";
			cout << endl << "Digite alguna opcion: ";
			gets(op_cad);
		} while (verificar_entero(op_cad) == false);
		op = convertir_enteros(op_cad);
		system("cls");
		switch (op){
		case 1:   Menu_Producto();
			break;

		case 2:   Menu_Cliente();
			break;

		case 3:   Menu_Vendedor();
			break;

		case 4:   Menu_Automovil();
			break;

		case 5:   Menu_Bomba();
			break;

		case 6:   Menu_Compra();
			break;

		case 7:   Menu_Venta();
			break;

		case 8:      Menu_Reportes();
			break;

		}
	} while (op != 0);
	system("cls");
	getch();
}
